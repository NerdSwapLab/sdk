{"version":3,"file":"sdk.cjs.development.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42,\n  ZKS = 324\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS = '0x8C2fF87ba97489657e564C87c296176Df40C5c36'\n\nexport const INIT_CODE_HASH = '0x34b9706dc0f70fd88aab95460a31860183154ecada91ed91dca768fc33b8d0a3'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'ETH')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET,'0x7fC6e502F837E037be1b0E230f8C71f1590d1C8E',18,'WETH','Wrapped Ether'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN,'0xc778417E063141139Fce010982780140Aa0cD5Ab',18,'WETH','Wrapped Ether'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY,\"0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6\",18,'WETH','Wrapped Ether'),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ZKS]: new Token(ChainId.ZKS,'0xdBC6298eFA22BeFEF59CA29Ec692d81ca509f5eD',18,'WETH','Wrapped Ether'),\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n// import { pack, keccak256 } from '@ethersproject/solidity'\n// import { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  // INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n  ChainId\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      var data = \"0xe6a43905000000000000000000000000\"+tokens[0].address.replace('0x','')+\"000000000000000000000000\" + tokens[1].address.replace('0x','');\n      var params = '{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"eth_call\",\"params\":[{\"to\": \"'+FACTORY_ADDRESS+'\",\"data\": \"'+data+'\"},\"latest\"]}';\n      var addr=\"0xfaf8d6a6aabedbaf6118a1ffe0b4b8c6bd227914\";\n      fetch(\"https://mainnet.era.zksync.io\",{method:'POST',headers:{'content-type':'application/json',accept:'application/json'},body:params}).then(res => {\n        res.json().then(address => {\n          addr=address.result.replace('0x000000000000000000000000','0x');\n          console.log(\"======= getAddress  \"+addr);\n        }).catch(e=>{\n          addr=\"0x\";\n          console.log(\"======= getAddress error \"+e);\n        });\n      }).catch(e=>{\n        addr=\"0x\";\n        console.log(\"======= getAddress error 1 \"+e);\n      });\n      console.log(\"======= getAddress\"+params);\n      console.log(\"======= getAddress\"+addr);\n      if(addr!=\"0xfaf8d6a6aabedbaf6118a1ffe0b4b8c6bd227914\"){\n        PAIR_ADDRESS_CACHE = {\n          ...PAIR_ADDRESS_CACHE,\n          [tokens[0].address]: {\n            ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n            [tokens[1].address]: addr\n          }\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'NerdSwap',\n      'NerdSwap LP'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.ZKS]: {\n    '0x3355df6D4c9C3035724Fd0e3914dE96A5a83aaf4': 6 // usdc\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","FACTORY_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SolidityType","SOLIDITY_TYPE_MAXIMA","_SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_Error","_inheritsLoose","_this","call","name","constructor","setPrototypeOf","_assertThisInitialized","prototype","_wrapNativeSuper","Error","InsufficientInputAmountError","_Error2","_this2","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","process","invariant","lessThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","ETHER","Token","_Currency","chainId","_proto","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","_WETH","MAINNET","ROPSTEN","RINKEBY","GÖRLI","KOVAN","ZKS","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","CurrencyAmount","_Fraction","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","_CurrencyAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","_iterator","_createForOfIteratorHelperLoose","pairs","entries","_step","done","_step$value","i","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","_PAIR_ADDRESS_CACHE","_PAIR_ADDRESS_CACHE$t","undefined","data","replace","params","addr","fetch","method","headers","accept","body","then","res","json","result","console","log","e","_PAIR_ADDRESS_CACHE2","_extends2","_extends3","_extends","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","apply","arguments","computePriceImpact","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","amounts","Array","nextPairs","EXACT_INPUT","_pair$getOutputAmount","nextPair","_pair$getInputAmount","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","_temp","currentPairs","originalAmountIn","bestTrades","_ref$maxNumResults","_ref","maxNumResults","_ref$maxHops","maxHops","tokenOut","_pair$getOutputAmount2","isInsufficientInputAmountError","concat","pairsExcludingThisPair","bestTradeExactOut","currencyIn","currencyAmountOut","_temp2","originalAmountOut","_ref2$maxNumResults","_ref2","_ref2$maxHops","tokenIn","_pair$getInputAmount2","isInsufficientReservesError","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","TOKEN_DECIMALS_CACHE","_TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Promise","resolve","Contract","ERC20","_TOKEN_DECIMALS_CACHE4","reject","fetchPairData","IUniswapV2Pair","abi","getReserves","reserves0","reserves1","balances"],"mappings":"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"}