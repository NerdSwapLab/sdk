{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42,\n  ZKS = 324\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS = '0x8C2fF87ba97489657e564C87c296176Df40C5c36'\n\nexport const INIT_CODE_HASH = '0x34b9706dc0f70fd88aab95460a31860183154ecada91ed91dca768fc33b8d0a3'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'ETH')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET,'0x7fC6e502F837E037be1b0E230f8C71f1590d1C8E',18,'WETH','Wrapped Ether'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN,'0xc778417E063141139Fce010982780140Aa0cD5Ab',18,'WETH','Wrapped Ether'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY,\"0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6\",18,'WETH','Wrapped Ether'),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ZKS]: new Token(ChainId.ZKS,'0xdBC6298eFA22BeFEF59CA29Ec692d81ca509f5eD',18,'WETH','Wrapped Ether'),\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n// import { pack, keccak256 } from '@ethersproject/solidity'\n// import { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  // INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n  ChainId\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      var data = \"0xe6a43905000000000000000000000000\"+tokens[0].address+\"000000000000000000000000\" + tokens[1].address;\n      var params = '{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"eth_call\",\"params\":[{\"to\": \"'+FACTORY_ADDRESS+'\",\"data\": '+data+'},\"latest\"]}';\n      var addr=\"0xdBC6298eFA22BeFEF59CA29Ec692d81ca509f5eD\";\n      fetch(\"https://mainnet.era.zksync.io\",{method:'POST',headers:{'content-type':'application/json',accept:'application/json'},body:params}).then(res => {\n        res.json().then(address => {\n          addr=address;\n          console.log(\"======= getAddress  \"+addr);\n        }).catch(e=>{\n          addr=\"0x\";\n          console.log(\"======= getAddress error \"+e);\n        });\n      }).catch(e=>{\n        addr=\"0x\";\n        console.log(\"======= getAddress error 1 \"+e);\n      });\n      console.log(\"======= getAddress\"+params);\n      console.log(\"======= getAddress\"+addr);\n      if(addr!=\"0xdBC6298eFA22BeFEF59CA29Ec692d81ca509f5eD\"){\n        PAIR_ADDRESS_CACHE = {\n          ...PAIR_ADDRESS_CACHE,\n          [tokens[0].address]: {\n            ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n            [tokens[1].address]: addr\n          }\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'NerdSwap',\n      'NerdSwap LP'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.ZKS]: {\n    '0x3355df6D4c9C3035724Fd0e3914dE96A5a83aaf4': 6 // usdc\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","SolidityType","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SOLIDITY_TYPE_MAXIMA","_SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_Error","_this","call","name","constructor","setPrototypeOf","_assertThisInitialized","prototype","_inheritsLoose","_wrapNativeSuper","Error","InsufficientInputAmountError","_Error2","_this2","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","this","ETHER","Token","_Currency","chainId","_proto","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","_WETH","MAINNET","ROPSTEN","RINKEBY","GÖRLI","KOVAN","ZKS","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","CurrencyAmount","_Fraction","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","_CurrencyAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","_step","prices","_iterator","_createForOfIteratorHelperLoose","pairs","entries","done","_step$value","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","_PAIR_ADDRESS_CACHE","_PAIR_ADDRESS_CACHE$t","_PAIR_ADDRESS_CACHE2","_extends2","_extends3","params","addr","fetch","method","headers","content-type","accept","body","then","res","json","console","log","e","_extends","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","apply","arguments","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","exactQuote","slippage","amounts","Array","nextPairs","EXACT_INPUT","i","_pair$getOutputAmount","nextPair","_pair$getInputAmount","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","_temp","currentPairs","originalAmountIn","bestTrades","_ref$maxNumResults","_ref","maxNumResults","_ref$maxHops","maxHops","tokenOut","isInsufficientInputAmountError","concat","pairsExcludingThisPair","bestTradeExactOut","currencyIn","currencyAmountOut","_temp2","originalAmountOut","_ref2$maxNumResults","_ref2","_ref2$maxHops","tokenIn","isInsufficientReservesError","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","args","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","TOKEN_DECIMALS_CACHE","_TOKEN_DECIMALS_CACHE","0x3355df6D4c9C3035724Fd0e3914dE96A5a83aaf4","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Promise","resolve","Contract","ERC20","_TOKEN_DECIMALS_CACHE4","reject","fetchPairData","IUniswapV2Pair","abi","getReserves","reserves0","reserves1","balances"],"mappings":"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"}